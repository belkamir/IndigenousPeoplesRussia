{"version":3,"sources":["components/favicon.png","fonts/Geometria.woff","components/Loading.jsx","components/InfoBox.jsx","components/constants.js","components/PeoplesMap.jsx","components/Peoples.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","style","height","display","justifyContent","alignItems","className","role","InfoBox","props","console","log","info","src","require","alt","width","Nation","Population","Language","LangFamily","Oblast","basemapStyle","color","weight","opacity","fillColor","fillOpacity","basemapStyle2","Opacity","waterStyle","subteStyle","nations","Nation_n","properties","PeoplesMap","useState","SetInfo","selected","geoJsonRef","useRef","ResetHighlight","layer","_leaflet_id","current","resetStyle","crs","L","Proj","CRS","resolutions","MapContainer","zoomControl","zoom","center","minZoom","maxZoom","maxBounds","GeoJSON","data","world","myConstClass","russia","lakes","onEachFeature","feature","on","click","e","previous","setStyle","dashArray","Select","target","mouseover","Browser","ie","opera","edge","bringToFront","HighlightFeature","mouseout","bindTooltip","permanent","direction","position","openTooltip","ref","ScaleControl","ZoomControl","Peoples","countries","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a8c0e3ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favicon.61bc53e7.png\";","module.exports = __webpack_public_path__ + \"static/media/Geometria.c7b2c2d8.woff\";","import React from \"react\";\n\nconst Loading = () => {\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div className=\"spinner-grow text-success\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n      <div className=\"spinner-grow text-danger\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n      <div className=\"spinner-grow text-info\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React from \"react\";\n\n\nconst InfoBox = (props) => {\n    console.log(props);\n\n\n    return (\n        <div className = \"infobox\">\n            <div className = \"title\" ><h4>Коренные малочисленные <br/> народы  Севера, Сибири <br/> и Дальнего Востока России</h4><br /></div>\n            <p className = \"textnation\">{props.info ?<h4> <img src = { require('./favicon.png')} alt=\" \" width=\"30\" /> {props.info.Nation}</h4>: \"Информация о народе – Выберите область\"}</p>  \n            <div className = \"text\">{props.info ? <p><h6>Население: </h6> {props.info.Population}  человек</p>: null}</div> \n            <div className = \"text\"> {props.info ? <p><h6>Язык: </h6> {props.info.Language} </p>: null}</div> \n            <div className = \"text\"> {props.info ? <p><h6>Языковая группа: </h6> {props.info.LangFamily} </p>: null}</div> \n            <div className = \"text\"> {props.info ? <p><h6>Регионы проживания: </h6> {props.info.Oblast} </p>: null}</div> \n        </div>\n    );\n  };\n  \n\nexport default InfoBox;","export const basemapStyle = {\n    color: \"#E3DFDA\",\n    weight: 2,\n    opacity: 1, \n    fillColor: \"#D9D5D2\", \n    fillOpacity: 1\n  };\n\n  export const basemapStyle2 = {\n    color: \"#D3D3D3\",\n      weight: 1.2,\n      Opacity: 1,\n      fillColor: \"#E6E2DF\",\n      fillOpacity: 1\n  };\n\n  export const waterStyle = {\n    color: \"#9FBFC6\",\n    weight: 0.8,\n    opacity: 1, \n    fillColor: \"#9FBFC6\", \n    fillOpacity: 1\n  };\n\n  ////\n\n  export const subteStyle = (nations) => {\n\n    var colorToUse;\n    var Nation_n = nations.properties.Nation;\n              \n    if (Nation_n === \"Эскимосы\") colorToUse = \"#6E4285\";\n    else if (Nation_n === \"Чукчи\") colorToUse = \"#959C83\";\n    else if (Nation_n === \"Эвенки\") colorToUse = \"#734061\";\n    else if (Nation_n === \"Эвены\") colorToUse = \"#6C898C\";\n    else if (Nation_n === \"Нганасаны\") colorToUse = \"#95C7B5\";\n    else if (Nation_n === \"Ханты\") colorToUse = \"#C7A78B\";\n    else if (Nation_n === \"Алеуты\") colorToUse = \"#A5D6A5\";\n    else if (Nation_n === \"Долганы\") colorToUse = \"#367478\";\n    else if (Nation_n === \"Ительмены\") colorToUse = \"#FAB36A\";\n    else if (Nation_n === \"Кеты\") colorToUse = \"#F36E6E\";\n    else if (Nation_n === \"Коряки\") colorToUse = \"#B56093\";\n    else if (Nation_n === \"Кумандинцы\") colorToUse = \"#8C4256\";\n    else if (Nation_n === \"Манси\") colorToUse = \"#8196C7\";\n    else if (Nation_n === \"Нанайцы\") colorToUse = \"GoldenRod\"; \n    else if (Nation_n === \"Негидальцы\") colorToUse = \"#A0E8C5\";\n    else if (Nation_n === \"Ненцы\") colorToUse = \"#74201F\";\n    else if (Nation_n === \"Нивхи\") colorToUse = \"#804E52\";\n    else if (Nation_n === \"Орочи\") colorToUse = \"#6B2D3E\";\n    else if (Nation_n === \"Саамы\") colorToUse = \"#A62D37\";\n    else if (Nation_n === \"Селькупы\") colorToUse = \"lemonchiffon\";\n    else if (Nation_n === \"Телеуты\") colorToUse = \"red\";\n    else if (Nation_n === \"Тофалары\") colorToUse = \"darkgreen\";\n    else if (Nation_n === \"Тувинцы\") colorToUse = \"darkgrey\";\n    else if (Nation_n === \"Удэгейцы\") colorToUse = \"grey\";\n    else if (Nation_n === \"Ульчи\") colorToUse = \"brown\";\n    else if (Nation_n === \"Шорцы\") colorToUse = \"olive\";\n    else if (Nation_n === \"Энцы\") colorToUse = \"purple\";\n    else if (Nation_n === \"Юкагиры\") colorToUse = \"white\";\n    else colorToUse = \"#000000\";\n              \n    return {\n      \"fillColor\": colorToUse,\n      \"weight\": 1,\n      \"fillOpacity\": 0.6,\n      \"color\": \"white\"\n    };\n  };\n\n  \n  ","import React from 'react';\nimport  { useRef, useState } from 'react';\nimport L from 'leaflet';\nimport { MapContainer, GeoJSON, ScaleControl, ZoomControl } from \"react-leaflet\";\nimport InfoBox from \"./InfoBox\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./PeoplesMap.css\"\nimport \"proj4leaflet\";\nimport \"proj4\";\nimport  * as myConstClass from  \"./constants.js\";\nimport world from \"../data/world.json\";\nimport russia from \"../data/russia.json\";\nimport lakes from \"../data/lakes.json\";\nimport nations from \"../data/nations.json\";\n\n\n\nconst PeoplesMap = () => {\n\nlet [info, SetInfo] = useState(null);\nlet selected = null;\n\n\nconst HighlightFeature = (layer) => {\n    layer.setStyle({\n        weight: 2,\n        color: 'white',\n        dashArray: '',\n        fillOpacity: 1\n    }\n    );\n\n    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n      layer.bringToFront();\n  }\n};\n\n\nconst geoJsonRef = useRef();\n\nconst ResetHighlight = (layer) => {\n  if(selected == null || selected._leaflet_id !== layer._leaflet_id) {\n    geoJsonRef.current.resetStyle(layer);\n  }\n};\n\n\nconst Select = (layer) => {\n  if (selected !== null) {\n    var previous = selected;\n  };\n\n  SetInfo(layer.feature.properties);\n  info = layer.feature.properties;\n\n  layer.setStyle({\n    weight: 3,\n    color: \"white\",\n    dashArray: ' 3 5',\n    fillOpacity: 1\n}\n);\n\n  selected = layer;\n  if (previous) {\n    ResetHighlight(previous);\n  }\n}\n  \nconst onEachFeatureF = (feature, layer) => {\n  layer.on({\n    click: function (e) {\n      Select(e.target); \n      // console.log(info);\n    },  \n    mouseover: function (e) {\n      HighlightFeature(e.target);\n    },\n    mouseout: function (e) {\n      ResetHighlight(e.target);\n    },\n      \n  });\n  //layer.bindPopup(\"ID: \" + feature.properties.fid+ \"<br>Народ: \" + feature.properties.Nation + \"<br>Описание: \" + feature.properties.Nation);\n  layer.bindTooltip(feature.properties.Nation, {permanent: true, direction: 'center', position:'auto'}).openTooltip();\n};\n\n\n\n  const crs = new L.Proj.CRS(\"EPSG:3576\",\"+proj=laea +lat_0=90 +lon_0=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\",\n {resolutions: [ 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0.5]\n  //origin: [ -180, -90 ]         \n}\n);\n\n\n  return (\n    <>\n      <InfoBox info={info}/>\n      <MapContainer style={{ height: \"100vh\" }} zoomControl={false} zoom={2} center={[65, 130]} minZoom={2} maxZoom={5} crs={crs} maxBounds={[[20, 75], [870, 2000]] } >\n\n        <GeoJSON\n          data = {world}\n          style={myConstClass.basemapStyle2}\n        />\n\n        <GeoJSON\n          data = {russia}\n          style={myConstClass.basemapStyle}\n        />\n\n        <GeoJSON\n          data = {lakes}\n          style={ myConstClass.waterStyle}\n        />\n\n        <GeoJSON\n          data={nations}\n          style={myConstClass.subteStyle}\n          onEachFeature={onEachFeatureF}\n          ref={geoJsonRef}\n        />\n\n        <ScaleControl position=\"bottomleft\" />\n        <ZoomControl position=\"bottomleft\" />\n\n      </MapContainer>\n\n    </>\n  );\n};\n\nexport default PeoplesMap;\n","import React from \"react\";\nimport Loading from \"./Loading\";\nimport PeoplesMap from \"./PeoplesMap\";\nimport \"./Peoples.css\"\nimport countries from \"../data/countries.json\";\n\nconst Peoples = () => {\n  \n  \n  return (\n    <div>\n      {countries.length === 0 ? (\n        <Loading />\n      ) : (\n        <div className=\"container\">\n\n          <div className=\"mainmap\"> \n            <PeoplesMap countries={countries} />\n          </div>\n          \n        </div>\n      )}\n      \n    </div>\n  );\n};\n\nexport default Peoples;\n","import React from \"react\";\nimport \"./App.css\";\nimport Peoples from \"./components/Peoples\";\n\nfunction App() {\n  return (\n    <div className='main'>\n      <Peoples/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport './fonts/Geometria.woff';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}